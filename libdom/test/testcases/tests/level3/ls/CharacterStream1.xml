<?xml version="1.0" standalone="no"?>
<?xml-stylesheet href="test-to-html.xsl" type="text/xml"?>
<!--

Copyright (c) 2003 World Wide Web Consortium, 
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University).  All 
Rights Reserved.  This program is distributed under the W3C's Software
Intellectual Property License.  This program is distributed in the 
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
PURPOSE.  

See W3C License http://www.w3.org/Consortium/Legal/ for more details.

-->
<!DOCTYPE test SYSTEM "dom3.dtd">


<test xmlns="http://www.w3.org/2001/DOM-Test-Suite/Level-3" name="CharacterStream1">
  <metadata>
    <title>CharacterStream1</title>
    <creator>Curt Arnold</creator>
    <description>Writes a document to a character stream and rereads the document.</description>
	<date qualifier="created">2003-12-08</date>
	<subject resource="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save#LS-DOMImplementationLS-createLSInput"/>
	<subject resource="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save#LS-LSInput-characterStream"/>
	<subject resource="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save#LS-LSOutput-characterStream"/>
  </metadata>
  <implementationAttribute name="validating" value="false"/>
  
  <var name="testDoc" type="Document"/>
  <var name="domImpl" type="DOMImplementationLS"/>
  <var name="output" type="LSOutput"/>
  <var name="serializer" type="LSSerializer"/>
  <var name="writer" type="LSWriter"/>
  <var name="checkWriter" type="LSWriter"/>
  <var name="reader" type="LSReader"/>
  <var name="checkReader" type="LSReader"/>
  <var name="status" type="boolean"/>
  <var name="input" type="LSInput"/>
  <var name="parser" type="LSParser"/>
  <var name="checkDoc" type="Document"/>
  <var name="docElem" type="Element"/>
  <var name="docElemName" type="DOMString"/>
  <var name="NULL_SCHEMA_TYPE" type="DOMString" isNull="true"/>
  
  <load var="testDoc" href="test0" willBeModified="false"/>
  <implementation var="domImpl"/>
  
  <!--   create an LSOutput and connect it to an stock LSWriter   -->
  <createLSOutput var="output" obj="domImpl"/>
  <!--   check that it was initially null    -->
  <characterStream var="checkWriter" obj="output" interface="LSOutput"/>
  <assertNull actual="checkWriter" id="writerInitiallyNull"/>
  <characterStream obj="output" value="writer" interface="LSOutput"/>
  <characterStream var="checkWriter" obj="output" interface="LSOutput"/>
  <assertNotNull actual="checkWriter" id="writerNotNull"/>
  
  <!--   create a serializer and write a test document    -->
  <createLSSerializer var="serializer" obj="domImpl"/>
  <write var="status" obj="serializer" destination="output" nodeArg="testDoc"/>
  <assertTrue actual="status" id="writeStatus"/>
  
  <!--   read the serialized document   -->
  <assign var="reader" value="writer"/>
  <createLSInput var="input" obj="domImpl"/>
  <characterStream var="checkReader" obj="input" interface="LSInput"/>
  <assertNull actual="checkReader" id="readerInitiallyNull"/>
  <characterStream obj="input" value="reader" interface="LSInput"/>
  <characterStream var="checkReader" obj="input" interface="LSInput"/>
  <assertNotNull actual="checkReader" id="readerNotNull"/>
  <createLSParser var="parser" obj="domImpl" schemaType="NULL_SCHEMA_TYPE" mode="1"/>
  <parse var="checkDoc" obj="parser" input="input"/>
  <assertNotNull actual="checkDoc" id="checkNotNull"/>
  <documentElement var="docElem" obj="checkDoc"/>
  <nodeName var="docElemName" obj="docElem"/>
  <assertEquals expected='"elt0"' actual="docElemName" id="checkDocElemName" ignoreCase="false"/>  
</test>






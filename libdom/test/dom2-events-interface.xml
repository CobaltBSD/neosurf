<?xml version="1.0"?>
<!--
Copyright (c) 2001-2003 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Document
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.
-->
<!--This file is an extract of interface definitions from Document Object Model (DOM) Level 2 Events Specification-->
<library>
  <interface name="EventTarget" id="Events-EventTarget" since="DOM Level 2">
    <descr>
      <p>The<code>EventTarget</code>interface is implemented by all<code>Nodes</code>in an implementation which supports the DOM Event Model. Therefore, this interface can be obtained by using binding-specific casting methods on an instance of the<code>Node</code>interface. The interface allows registration and removal of<code>EventListeners</code>on an<code>EventTarget</code>and dispatch of events to that<code>EventTarget</code>.</p>
    </descr>
    <method name="addEventListener" id="Events-EventTarget-addEventListener">
      <descr>
        <p>This method allows the registration of event listeners on the event target. If an<code>EventListener</code>is added to an<code>EventTarget</code>while it is processing an event, it will not be triggered by the current actions but may be triggered during a later stage of event flow, such as the bubbling phase.</p>
        <p>If multiple identical<code>EventListener</code>s are registered on the same<code>EventTarget</code>with the same parameters the duplicate instances are discarded. They do not cause the<code>EventListener</code>to be called twice and since they are discarded they do not need to be removed with the<code>removeEventListener</code>method.</p>
      </descr>
      <parameters>
        <param name="type" type="DOMString" attr="in">
          <descr>
            <p>The event type for which the user is registering</p>
          </descr>
        </param>
        <param name="listener" type="EventListener" attr="in">
          <descr>
            <p>The<code>listener</code>parameter takes an interface implemented by the user which contains the methods to be called when the event occurs.</p>
          </descr>
        </param>
        <param name="useCapture" type="boolean" attr="in">
          <descr>
            <p>If true,<code>useCapture</code>indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered<code>EventListener</code>before being dispatched to any<code>EventTargets</code>beneath them in the tree. Events which are bubbling upward through the tree will not trigger an<code>EventListener</code>designated to use capture.</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
    <method name="removeEventListener" id="Events-EventTarget-removeEventListener">
      <descr>
        <p>This method allows the removal of event listeners from the event target. If an<code>EventListener</code>is removed from an<code>EventTarget</code>while it is processing an event, it will not be triggered by the current actions.<code>EventListener</code>s can never be invoked after being removed.</p>
        <p>Calling<code>removeEventListener</code>with arguments which do not identify any currently registered<code>EventListener</code>on the<code>EventTarget</code>has no effect.</p>
      </descr>
      <parameters>
        <param name="type" type="DOMString" attr="in">
          <descr>
            <p>Specifies the event type of the<code>EventListener</code>being removed.</p>
          </descr>
        </param>
        <param name="listener" type="EventListener" attr="in">
          <descr>
            <p>The<code>EventListener</code>parameter indicates the<code>EventListener</code>to be removed.</p>
          </descr>
        </param>
        <param name="useCapture" type="boolean" attr="in">
          <descr>
            <p>Specifies whether the<code>EventListener</code>being removed was registered as a capturing listener or not. If a listener was registered twice, one with capture and one without, each must be removed separately. Removal of a capturing listener does not affect a non-capturing version of the same listener, and vice versa.</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
    <method name="dispatchEvent" id="Events-EventTarget-dispatchEvent">
      <descr>
        <p>This method allows the dispatch of events into the implementations event model. Events dispatched in this manner will have the same capturing and bubbling behavior as events dispatched directly by the implementation. The target of the event is the<code>EventTarget</code>on which<code>dispatchEvent</code>is called.</p>
      </descr>
      <parameters>
        <param name="evt" type="Event" attr="in">
          <descr>
            <p>Specifies the event type, behavior, and contextual information to be used in processing the event.</p>
          </descr>
        </param>
      </parameters>
      <returns type="boolean">
        <descr>
          <p>The return value of<code>dispatchEvent</code>indicates whether any of the listeners which handled the event called<code>preventDefault</code>. If<code>preventDefault</code>was called the value is false, else the value is true.</p>
        </descr>
      </returns>
      <raises>
        <exception name="EventException">
          <descr>
            <p>UNSPECIFIED_EVENT_TYPE_ERR: Raised if the<code>Event</code>'s type was not specified by initializing the event before<code>dispatchEvent</code>was called. Specification of the<code>Event</code>'s type as<code>null</code>or an empty string will also trigger this exception.</p>
          </descr>
        </exception>
      </raises>
    </method>
  </interface>
  <interface id="Events-EventListener" name="EventListener" since="DOM Level 2">
    <descr>
      <p>The<code>EventListener</code>interface is the primary method for handling events. Users implement the<code>EventListener</code>interface and register their listener on an<code>EventTarget</code>using the<code>AddEventListener</code>method. The users should also remove their<code>EventListener</code>from its<code>EventTarget</code>after they have completed using the listener.</p>
      <p>When a<code>Node</code>is copied using the<code>cloneNode</code>method the<code>EventListener</code>s attached to the source<code>Node</code>are not attached to the copied<code>Node</code>. If the user wishes the same<code>EventListener</code>s to be added to the newly created copy the user must add them manually.</p>
    </descr>
    <method name="handleEvent" id="Events-EventListener-handleEvent">
      <descr>
        <p>This method is called whenever an event occurs of the type for which the<code>EventListener</code>interface was registered.</p>
      </descr>
      <parameters>
        <param name="evt" type="Event" attr="in">
          <descr>
            <p>The<code>Event</code>contains contextual information about the event. It also contains the<code>stopPropagation</code>and<code>preventDefault</code>methods which are used in determining the event's flow and default action.</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
  </interface>
  <interface name="Event" id="Events-Event" since="DOM Level 2">
    <descr>
      <p>The<code>Event</code>interface is used to provide contextual information about an event to the handler processing the event. An object which implements the<code>Event</code>interface is generally passed as the first parameter to an event handler. More specific context information is passed to event handlers by deriving additional interfaces from<code>Event</code>which contain information directly relating to the type of event they accompany. These derived interfaces are also implemented by the object passed to the event listener.</p>
    </descr>
    <group id="Events-Event-eventPhaseType" name="PhaseType">
      <descr>
        <p>An integer indicating which phase of event flow is being processed.</p>
      </descr>
      <constant name="CAPTURING_PHASE" type="unsigned short" value="1">
        <descr>
          <p>The current event phase is the capturing phase.</p>
        </descr>
      </constant>
      <constant name="AT_TARGET" type="unsigned short" value="2">
        <descr>
          <p>The event is currently being evaluated at the target<code>EventTarget</code>.</p>
        </descr>
      </constant>
      <constant name="BUBBLING_PHASE" type="unsigned short" value="3">
        <descr>
          <p>The current event phase is the bubbling phase.</p>
        </descr>
      </constant>
    </group>
    <attribute type="DOMString" name="type" readonly="yes" id="Events-Event-type">
      <descr>
        <p>The name of the event (case-insensitive). The name must be an<termref def="dt-XML-name">XML name</termref>.</p>
      </descr>
    </attribute>
    <attribute type="EventTarget" name="target" readonly="yes" id="Events-Event-target">
      <descr>
        <p>Used to indicate the<code>EventTarget</code>to which the event was originally dispatched.</p>
      </descr>
    </attribute>
    <attribute type="EventTarget" name="currentTarget" readonly="yes" id="Events-Event-currentTarget">
      <descr>
        <p>Used to indicate the<code>EventTarget</code>whose<code>EventListeners</code>are currently being processed. This is particularly useful during capturing and bubbling.</p>
      </descr>
    </attribute>
    <attribute type="unsigned short" name="eventPhase" readonly="yes" id="Events-Event-eventPhase">
      <descr>
        <p>Used to indicate which phase of event flow is currently being evaluated.</p>
      </descr>
    </attribute>
    <attribute type="boolean" name="bubbles" readonly="yes" id="Events-Event-canBubble">
      <descr>
        <p>Used to indicate whether or not an event is a bubbling event. If the event can bubble the value is true, else the value is false.</p>
      </descr>
    </attribute>
    <attribute type="boolean" name="cancelable" readonly="yes" id="Events-Event-canCancel">
      <descr>
        <p>Used to indicate whether or not an event can have its default action prevented. If the default action can be prevented the value is true, else the value is false.</p>
      </descr>
    </attribute>
    <attribute type="DOMTimeStamp" name="timeStamp" readonly="yes" id="Events-Event-timeStamp">
      <descr>
        <p>Used to specify the time (in milliseconds relative to the epoch) at which the event was created. Due to the fact that some systems may not provide this information the value of<code>timeStamp</code>may be not available for all events. When not available, a value of 0 will be returned. Examples of epoch time are the time of the system start or 0:0:0 UTC 1st January 1970.</p>
      </descr>
    </attribute>
    <method name="stopPropagation" id="Events-Event-stopPropagation">
      <descr>
        <p>The<code>stopPropagation</code>method is used prevent further propagation of an event during event flow. If this method is called by any<code>EventListener</code>the event will cease propagating through the tree. The event will complete dispatch to all listeners on the current<code>EventTarget</code>before event flow stops. This method may be used during any stage of event flow.</p>
      </descr>
      <parameters/>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
    <method name="preventDefault" id="Events-Event-preventDefault">
      <descr>
        <p>If an event is cancelable, the<code>preventDefault</code>method is used to signify that the event is to be canceled, meaning any default action normally taken by the implementation as a result of the event will not occur. If, during any stage of event flow, the<code>preventDefault</code>method is called the event is canceled. Any default action associated with the event will not occur. Calling this method for a non-cancelable event has no effect. Once<code>preventDefault</code>has been called it will remain in effect throughout the remainder of the event's propagation. This method may be used during any stage of event flow.</p>
      </descr>
      <parameters/>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
    <method name="initEvent" id="Events-Event-initEvent">
      <descr>
        <p>The<code>initEvent</code>method is used to initialize the value of an<code>Event</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>Event</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times the final invocation takes precedence. If called from a subclass of<code>Event</code>interface only the values specified in the<code>initEvent</code>method are modified, all other attributes are left unchanged.</p>
      </descr>
      <parameters>
        <param name="eventTypeArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the event type. This type may be any event type currently defined in this specification or a new event type.. The string must be an<termref def="dt-XML-name">XML name</termref>.</p>
            <p>Any new event type must not begin with any upper, lower, or mixed case version of the string "DOM". This prefix is reserved for future DOM event sets. It is also strongly recommended that third parties adding their own events use their own prefix to avoid confusion and lessen the probability of conflicts with other new events.</p>
          </descr>
        </param>
        <param name="canBubbleArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event can bubble.</p>
          </descr>
        </param>
        <param name="cancelableArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event's default action can be prevented.</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
  </interface>
  <exception id="Events-EventException" name="EventException" since="DOM Level 2">
    <descr>
      <p>Event operations may throw an<code>EventException</code>as specified in their method descriptions.</p>
    </descr>
    <component id="Events-EventException-code" name="code">
      <typename>unsigned short</typename>
    </component>
  </exception>
  <group id="Events-EventException-EventExceptionCode" name="EventExceptionCode" since="DOM Level 2">
    <descr>
      <p>An integer indicating the type of error generated.</p>
    </descr>
    <constant name="UNSPECIFIED_EVENT_TYPE_ERR" type="unsigned short" value="0">
      <descr>
        <p>If the<code>Event</code>'s type was not specified by initializing the event before the method was called. Specification of the Event's type as<code>null</code>or an empty string will also trigger this exception.</p>
      </descr>
    </constant>
  </group>
  <interface name="DocumentEvent" id="Events-DocumentEvent" since="DOM Level 2">
    <descr>
      <p>The<code>DocumentEvent</code>interface provides a mechanism by which the user can create an Event of a type supported by the implementation. It is expected that the<code>DocumentEvent</code>interface will be implemented on the same object which implements the<code>Document</code>interface in an implementation which supports the Event model.</p>
    </descr>
    <method name="createEvent" id="Events-DocumentEvent-createEvent">
      <descr>
        <p/>
      </descr>
      <parameters>
        <param name="eventType" type="DOMString" attr="in">
          <descr>
            <p>The<code>eventType</code>parameter specifies the type of<code>Event</code>interface to be created. If the<code>Event</code>interface specified is supported by the implementation this method will return a new<code>Event</code>of the interface type requested. If the<code>Event</code>is to be dispatched via the<code>dispatchEvent</code>method the appropriate event init method must be called after creation in order to initialize the<code>Event</code>'s values. As an example, a user wishing to synthesize some kind of<code>UIEvent</code>would call<code>createEvent</code>with the parameter "UIEvents". The<code>initUIEvent</code>method could then be called on the newly created<code>UIEvent</code>to set the specific type of UIEvent to be dispatched and set its context information.</p>
            <p>The<code>createEvent</code>method is used in creating<code>Event</code>s when it is either inconvenient or unnecessary for the user to create an<code>Event</code>themselves. In cases where the implementation provided<code>Event</code>is insufficient, users may supply their own<code>Event</code>implementations for use with the<code>dispatchEvent</code>method.</p>
          </descr>
        </param>
      </parameters>
      <returns type="Event">
        <descr>
          <p>The newly created<code>Event</code></p>
        </descr>
      </returns>
      <raises>
        <exception name="DOMException">
          <descr>
            <p>NOT_SUPPORTED_ERR: Raised if the implementation does not support the type of<code>Event</code>interface requested</p>
          </descr>
        </exception>
      </raises>
    </method>
  </interface>
  <interface name="UIEvent" inherits="Event" id="Events-UIEvent" since="DOM Level 2">
    <descr>
      <p>The<code>UIEvent</code>interface provides specific contextual information associated with User Interface events.</p>
    </descr>
    <attribute type="views::AbstractView" name="view" readonly="yes" id="Events-UIEvent-view">
      <descr>
        <p>The<code>view</code>attribute identifies the<code>AbstractView</code>from which the event was generated.</p>
      </descr>
    </attribute>
    <attribute id="Events-UIEvent-detail" name="detail" type="long" readonly="yes">
      <descr>
        <p>Specifies some detail information about the<code>Event</code>, depending on the type of event.</p>
      </descr>
    </attribute>
    <method name="initUIEvent" id="Events-Event-initUIEvent">
      <descr>
        <p>The<code>initUIEvent</code>method is used to initialize the value of a<code>UIEvent</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>UIEvent</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</p>
      </descr>
      <parameters>
        <param name="typeArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the event type.</p>
          </descr>
        </param>
        <param name="canBubbleArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event can bubble.</p>
          </descr>
        </param>
        <param name="cancelableArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event's default action can be prevented.</p>
          </descr>
        </param>
        <param name="viewArg" type="views::AbstractView" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s<code>AbstractView</code>.</p>
          </descr>
        </param>
        <param name="detailArg" type="long" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s detail.</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
  </interface>
  <interface name="MouseEvent" inherits="UIEvent" id="Events-MouseEvent" since="DOM Level 2">
    <descr>
      <p>The<code>MouseEvent</code>interface provides specific contextual information associated with Mouse events.</p>
      <p>The<code>detail</code>attribute inherited from<code>UIEvent</code>indicates the number of times a mouse button has been pressed and released over the same screen location during a user action. The attribute value is 1 when the user begins this action and increments by 1 for each full sequence of pressing and releasing. If the user moves the mouse between the mousedown and mouseup the value will be set to 0, indicating that no click is occurring.</p>
      <p>In the case of nested elements mouse events are always targeted at the most deeply nested element. Ancestors of the targeted element may use bubbling to obtain notification of mouse events which occur within its descendent elements.</p>
    </descr>
    <attribute type="long" name="screenX" readonly="yes" id="Events-MouseEvent-screenX">
      <descr>
        <p>The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.</p>
      </descr>
    </attribute>
    <attribute type="long" name="screenY" readonly="yes" id="Events-MouseEvent-screenY">
      <descr>
        <p>The vertical coordinate at which the event occurred relative to the origin of the screen coordinate system.</p>
      </descr>
    </attribute>
    <attribute type="long" name="clientX" readonly="yes" id="Events-MouseEvent-clientX">
      <descr>
        <p>The horizontal coordinate at which the event occurred relative to the DOM implementation's client area.</p>
      </descr>
    </attribute>
    <attribute type="long" name="clientY" readonly="yes" id="Events-MouseEvent-clientY">
      <descr>
        <p>The vertical coordinate at which the event occurred relative to the DOM implementation's client area.</p>
      </descr>
    </attribute>
    <attribute type="boolean" name="ctrlKey" readonly="yes" id="Events-MouseEvent-ctrlKey">
      <descr>
        <p>Used to indicate whether the 'ctrl' key was depressed during the firing of the event.</p>
      </descr>
    </attribute>
    <attribute type="boolean" name="shiftKey" readonly="yes" id="Events-MouseEvent-shiftKey">
      <descr>
        <p>Used to indicate whether the 'shift' key was depressed during the firing of the event.</p>
      </descr>
    </attribute>
    <attribute type="boolean" name="altKey" readonly="yes" id="Events-MouseEvent-altKey">
      <descr>
        <p>Used to indicate whether the 'alt' key was depressed during the firing of the event. On some platforms this key may map to an alternative key name.</p>
      </descr>
    </attribute>
    <attribute type="boolean" name="metaKey" readonly="yes" id="Events-MouseEvent-metaKey">
      <descr>
        <p>Used to indicate whether the 'meta' key was depressed during the firing of the event. On some platforms this key may map to an alternative key name.</p>
      </descr>
    </attribute>
    <attribute type="unsigned short" name="button" readonly="yes" id="Events-MouseEvent-button">
      <descr>
        <p>During mouse events caused by the depression or release of a mouse button,<code>button</code>is used to indicate which mouse button changed state. The values for<code>button</code>range from zero to indicate the left button of the mouse, one to indicate the middle button if present, and two to indicate the right button. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left.</p>
      </descr>
    </attribute>
    <attribute type="EventTarget" name="relatedTarget" readonly="yes" id="Events-MouseEvent-relatedTarget">
      <descr>
        <p>Used to identify a secondary<code>EventTarget</code>related to a UI event. Currently this attribute is used with the mouseover event to indicate the<code>EventTarget</code>which the pointing device exited and with the mouseout event to indicate the<code>EventTarget</code>which the pointing device entered.</p>
      </descr>
    </attribute>
    <method name="initMouseEvent" id="Events-Event-initMouseEvent">
      <descr>
        <p>The<code>initMouseEvent</code>method is used to initialize the value of a<code>MouseEvent</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>MouseEvent</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</p>
      </descr>
      <parameters>
        <param name="typeArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the event type.</p>
          </descr>
        </param>
        <param name="canBubbleArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event can bubble.</p>
          </descr>
        </param>
        <param name="cancelableArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event's default action can be prevented.</p>
          </descr>
        </param>
        <param name="viewArg" type="views::AbstractView" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s<code>AbstractView</code>.</p>
          </descr>
        </param>
        <param name="detailArg" type="long" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s mouse click count.</p>
          </descr>
        </param>
        <param name="screenXArg" type="long" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s screen x coordinate</p>
          </descr>
        </param>
        <param name="screenYArg" type="long" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s screen y coordinate</p>
          </descr>
        </param>
        <param name="clientXArg" type="long" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s client x coordinate</p>
          </descr>
        </param>
        <param name="clientYArg" type="long" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s client y coordinate</p>
          </descr>
        </param>
        <param name="ctrlKeyArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not control key was depressed during the<code>Event</code>.</p>
          </descr>
        </param>
        <param name="altKeyArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not alt key was depressed during the<code>Event</code>.</p>
          </descr>
        </param>
        <param name="shiftKeyArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not shift key was depressed during the<code>Event</code>.</p>
          </descr>
        </param>
        <param name="metaKeyArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not meta key was depressed during the<code>Event</code>.</p>
          </descr>
        </param>
        <param name="buttonArg" type="unsigned short" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s mouse button.</p>
          </descr>
        </param>
        <param name="relatedTargetArg" type="EventTarget" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s related<code>EventTarget</code>.</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
  </interface>
  <interface name="MutationEvent" inherits="Event" id="Events-MutationEvent" since="DOM Level 2">
    <descr>
      <p>The<code>MutationEvent</code>interface provides specific contextual information associated with Mutation events.</p>
    </descr>
    <group id="Events-MutationEvent-attrChangeType" name="attrChangeType">
      <descr>
        <p>An integer indicating in which way the<code>Attr</code>was changed.</p>
      </descr>
      <constant name="MODIFICATION" type="unsigned short" value="1">
        <descr>
          <p>The<code>Attr</code>was modified in place.</p>
        </descr>
      </constant>
      <constant name="ADDITION" type="unsigned short" value="2">
        <descr>
          <p>The<code>Attr</code>was just added.</p>
        </descr>
      </constant>
      <constant name="REMOVAL" type="unsigned short" value="3">
        <descr>
          <p>The<code>Attr</code>was just removed.</p>
        </descr>
      </constant>
    </group>
    <attribute type="Node" name="relatedNode" readonly="yes" id="Events-MutationEvent-relatedNode">
      <descr>
        <p><code>relatedNode</code>is used to identify a secondary node related to a mutation event. For example, if a mutation event is dispatched to a node indicating that its parent has changed, the<code>relatedNode</code>is the changed parent. If an event is instead dispatched to a subtree indicating a node was changed within it, the<code>relatedNode</code>is the changed node. In the case of the DOMAttrModified event it indicates the<code>Attr</code>node which was modified, added, or removed.</p>
      </descr>
    </attribute>
    <attribute type="DOMString" name="prevValue" readonly="yes" id="Events-MutationEvent-prevValue">
      <descr>
        <p><code>prevValue</code>indicates the previous value of the<code>Attr</code>node in DOMAttrModified events, and of the<code>CharacterData</code>node in DOMCharDataModified events.</p>
      </descr>
    </attribute>
    <attribute type="DOMString" name="newValue" readonly="yes" id="Events-MutationEvent-newValue">
      <descr>
        <p><code>newValue</code>indicates the new value of the<code>Attr</code>node in DOMAttrModified events, and of the<code>CharacterData</code>node in DOMCharDataModified events.</p>
      </descr>
    </attribute>
    <attribute type="DOMString" name="attrName" readonly="yes" id="Events-MutationEvent-attrName">
      <descr>
        <p><code>attrName</code>indicates the name of the changed<code>Attr</code>node in a DOMAttrModified event.</p>
      </descr>
    </attribute>
    <attribute type="unsigned short" name="attrChange" readonly="yes" id="Events-MutationEvent-attrChange">
      <descr>
        <p><code>attrChange</code>indicates the type of change which triggered the DOMAttrModified event. The values can be<code>MODIFICATION</code>,<code>ADDITION</code>, or<code>REMOVAL</code>.</p>
      </descr>
    </attribute>
    <method name="initMutationEvent" id="Events-Event-initMutationEvent">
      <descr>
        <p>The<code>initMutationEvent</code>method is used to initialize the value of a<code>MutationEvent</code>created through the<code>DocumentEvent</code>interface. This method may only be called before the<code>MutationEvent</code>has been dispatched via the<code>dispatchEvent</code>method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</p>
      </descr>
      <parameters>
        <param name="typeArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the event type.</p>
          </descr>
        </param>
        <param name="canBubbleArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event can bubble.</p>
          </descr>
        </param>
        <param name="cancelableArg" type="boolean" attr="in">
          <descr>
            <p>Specifies whether or not the event's default action can be prevented.</p>
          </descr>
        </param>
        <param name="relatedNodeArg" type="Node" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s related Node.</p>
          </descr>
        </param>
        <param name="prevValueArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s<code>prevValue</code>attribute. This value may be null.</p>
          </descr>
        </param>
        <param name="newValueArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s<code>newValue</code>attribute. This value may be null.</p>
          </descr>
        </param>
        <param name="attrNameArg" type="DOMString" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s<code>attrName</code>attribute. This value may be null.</p>
          </descr>
        </param>
        <param name="attrChangeArg" type="unsigned short" attr="in">
          <descr>
            <p>Specifies the<code>Event</code>'s<code>attrChange</code>attribute</p>
          </descr>
        </param>
      </parameters>
      <returns type="void">
        <descr>
          <p/>
        </descr>
      </returns>
      <raises/>
    </method>
  </interface>
</library>
